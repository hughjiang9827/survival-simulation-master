
R version 3.6.2 (2019-12-12) -- "Dark and Stormy Night"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin15.6.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> library(tidyverse)
── Attaching packages ─────────────────────────────────────── tidyverse 1.3.0 ──
✔ ggplot2 3.2.1     ✔ purrr   0.3.3
✔ tibble  2.1.3     ✔ dplyr   0.8.4
✔ tidyr   1.0.2     ✔ stringr 1.4.0
✔ readr   1.3.1     ✔ forcats 0.4.0
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ dplyr::filter() masks stats::filter()
✖ dplyr::lag()    masks stats::lag()
> library(ggpubr)
> 
> load("./output/df_metric.rda")
> df_metric <- df_metric %>%
+   filter(metric_name == "mse") %>%
+   # TODO: check
+   filter(method != "MOSS_classic") %>%
+   # filter(method != "super learner") %>%
+   # filter(method != "tmle3 1-dim ulfm") %>%
+   filter(method != "MOSS_l1")
>   # %>% mutate(method =
>   # recode(
>   #   method,
>   #   TMLE = "iter. TMLE",
>   #   MOSS_l1 = "OS TMLE (lasso)",
>   #   MOSS_l2 = "OS TMLE (ridge)",
>   #   "super learner" = "Super learner",
>   # )) %>% mutate(
>   #   method = factor(
>   #     method,
>   #     # TODO: check
>   #     # levels = c("KM", "Super learner", "IPCW", "EE", "iter. TMLE", "OS TMLE (ridge)", "OS TMLE (lasso)")
>   #     levels = c("Super learner", "iter. TMLE", "OS TMLE (ridge)", "OS TMLE (lasso)", "tmle3 1-dim ulfm")      
>   #     )
>   #   )
> df_mse <- df_metric %>%
+   group_by(method, t, n) %>%
+   summarise(
+     mse = mean(mse),
+     bias = mean(bias),
+     truth = mean(truth),
+     cnt = dplyr::n()
+   ) %>%
+   mutate(
+     variance = mse - bias ^ 2,
+     rmse = sqrt(mse),
+     nrmse = rmse / truth,
+     bias_percent = bias / truth
+   )
> # TODO: check 
> # df_mse_tmle <- df_mse %>% filter(method == "iter. TMLE")
> df_mse_tmle <- df_mse %>% filter(method == "MOSS_l2")
> df_mse_joined <- dplyr::left_join(df_mse, df_mse_tmle, by = c("t", "n"))
> df_mse_joined <- df_mse_joined %>% mutate(re = mse.y / mse.x, method = method.x)
> 
> gg1 <- ggplot(df_mse, aes(x = t, y = sqrt(n) * abs(bias), color = method)) +
+   geom_line() +
+   geom_hline(yintercept = 0, lty = 3) +
+   ylab(expression(paste(sqrt(n), " Absolute bias"))) +
+   ylim(c(NA, 10)) +
+   facet_wrap(n ~ ., nrow = 1) +
+   scale_y_log10() +
+   theme_bw() +
+   guides(colour = guide_legend(nrow = 1)) +
+   labs(colour = "Method") +
+   rremove("x.text") +
+   rremove("xlab")
Scale for 'y' is already present. Adding another scale for 'y', which will
replace the existing scale.
> 
> gg2 <- ggplot(df_mse, aes(x = t, y = n * variance, color = method)) +
+   geom_line() +
+   scale_y_log10() +
+   ylab("n * Variance") +
+   facet_wrap(n ~ ., nrow = 1) +
+   theme_bw() +
+   rremove("x.text") +
+   rremove("xlab") +
+   theme(
+     strip.background = element_blank(),
+     strip.text.x = element_blank()
+   )
> gg3 <- ggplot(df_mse, aes(x = t, y = n * mse, color = method)) +
+   geom_line() +
+   ylab("n * MSE") +
+   scale_y_log10() +
+   facet_wrap(n ~ ., nrow = 1) +
+   theme_bw() +
+   rremove("x.text") +
+   rremove("xlab") +
+   theme(
+     strip.background = element_blank(),
+     strip.text.x = element_blank()
+   )
> 
> ymax <- quantile(df_mse_joined$re[!is.na(df_mse_joined$re)], 0.99)
> gg3_2 <- ggplot(df_mse_joined, aes(x = t, y = re, color = method)) +
+   geom_line() +
+   ylim(0, ymax) +
+   ylab("Relative efficiency") +
+   facet_wrap(n ~ ., nrow = 1) +
+   theme_bw() +
+   rremove("x.text") +
+   rremove("xlab") +
+   theme(
+     strip.background = element_blank(),
+     strip.text.x = element_blank()
+   )
> 
> gg4 <- ggplot(df_mse, aes(x = t, y = cnt, color = method)) +
+   geom_line() +
+   ylab("Number of samples") +
+   facet_wrap(n ~ ., nrow = 1) +
+   theme_bw() +
+   theme(
+     strip.background = element_blank(),
+     strip.text.x = element_blank()
+   )
> gg_out1 <- ggarrange(
+   gg1,
+   gg2,
+   gg3,
+   gg3_2,
+   gg4,
+   nrow = 5,
+   common.legend = TRUE,
+   legend = 'bottom',
+   align = "v"
+ )
Warning messages:
1: Transformation introduced infinite values in continuous y-axis 
2: Transformation introduced infinite values in continuous y-axis 
3: Transformation introduced infinite values in continuous y-axis 
4: Transformation introduced infinite values in continuous y-axis 
5: Transformation introduced infinite values in continuous y-axis 
6: Transformation introduced infinite values in continuous y-axis 
7: Removed 5 rows containing missing values (geom_path). 
> 
> vals <- df_metric$bias * sqrt(df_metric$n)
> xlims <- quantile(vals[!is.na(vals)], c(0.025, 0.975))
> gg5 <- ggplot(
+   df_metric %>% filter(t %% 10 == 1 & t <= 50),
+   aes(x = bias * sqrt(n), color = method)
+ ) +
+   geom_density() +
+   geom_vline(xintercept = 0, lty = 2) +
+   xlim(xlims) +
+   ylim(c(0, 10)) +
+   facet_grid(t ~ n) +
+   theme_bw() +
+   theme(legend.position = "bottom") +
+   guides(colour = guide_legend(nrow = 1))
> 
> ggsave(gg_out1, filename = "./output/mse_panel1.png", width = 8, height = 8)
> ggsave(gg5, filename = "./output/mse_panel2.png", width = 8, height = 8)
Warning message:
Removed 1 rows containing non-finite values (stat_density). 
> 
> proc.time()
   user  system elapsed 
  3.766   0.314   4.402 
